//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Cole\source\repos\MetaParser\MetaParser.WPF\Expressions\MetaExpressions.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MetaExpressionsParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public interface IMetaExpressionsListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaExpressionsParser.parse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParse([NotNull] MetaExpressionsParser.ParseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaExpressionsParser.parse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParse([NotNull] MetaExpressionsParser.ParseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bitshiftOps</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitshiftOps([NotNull] MetaExpressionsParser.BitshiftOpsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bitshiftOps</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitshiftOps([NotNull] MetaExpressionsParser.BitshiftOpsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numericAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumericAtomExp([NotNull] MetaExpressionsParser.NumericAtomExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numericAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumericAtomExp([NotNull] MetaExpressionsParser.NumericAtomExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>catchallAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchallAtomExp([NotNull] MetaExpressionsParser.CatchallAtomExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>catchallAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchallAtomExp([NotNull] MetaExpressionsParser.CatchallAtomExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bitwiseComplementOp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitwiseComplementOp([NotNull] MetaExpressionsParser.BitwiseComplementOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bitwiseComplementOp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitwiseComplementOp([NotNull] MetaExpressionsParser.BitwiseComplementOpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>mulDivExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulDivExp([NotNull] MetaExpressionsParser.MulDivExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mulDivExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulDivExp([NotNull] MetaExpressionsParser.MulDivExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>boolAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolAtomExp([NotNull] MetaExpressionsParser.BoolAtomExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>boolAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolAtomExp([NotNull] MetaExpressionsParser.BoolAtomExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>getvarAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetvarAtomExp([NotNull] MetaExpressionsParser.GetvarAtomExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>getvarAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetvarAtomExp([NotNull] MetaExpressionsParser.GetvarAtomExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>setVarExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetVarExp([NotNull] MetaExpressionsParser.SetVarExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>setVarExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetVarExp([NotNull] MetaExpressionsParser.SetVarExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>getindexAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetindexAtomExp([NotNull] MetaExpressionsParser.GetindexAtomExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>getindexAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetindexAtomExp([NotNull] MetaExpressionsParser.GetindexAtomExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bitwiseOps</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitwiseOps([NotNull] MetaExpressionsParser.BitwiseOpsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bitwiseOps</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitwiseOps([NotNull] MetaExpressionsParser.BitwiseOpsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addSubExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddSubExp([NotNull] MetaExpressionsParser.AddSubExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addSubExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddSubExp([NotNull] MetaExpressionsParser.AddSubExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>booleanComparisonExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanComparisonExp([NotNull] MetaExpressionsParser.BooleanComparisonExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanComparisonExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanComparisonExp([NotNull] MetaExpressionsParser.BooleanComparisonExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringAtomExp([NotNull] MetaExpressionsParser.StringAtomExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringAtomExp([NotNull] MetaExpressionsParser.StringAtomExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>regexExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRegexExp([NotNull] MetaExpressionsParser.RegexExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>regexExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRegexExp([NotNull] MetaExpressionsParser.RegexExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>powerExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPowerExp([NotNull] MetaExpressionsParser.PowerExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>powerExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPowerExp([NotNull] MetaExpressionsParser.PowerExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>comparisonExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonExp([NotNull] MetaExpressionsParser.ComparisonExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>comparisonExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonExp([NotNull] MetaExpressionsParser.ComparisonExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCall</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] MetaExpressionsParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCall</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] MetaExpressionsParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>hexNumberAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHexNumberAtomExp([NotNull] MetaExpressionsParser.HexNumberAtomExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>hexNumberAtomExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHexNumberAtomExp([NotNull] MetaExpressionsParser.HexNumberAtomExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExp([NotNull] MetaExpressionsParser.ParenthesisExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="MetaExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExp([NotNull] MetaExpressionsParser.ParenthesisExpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaExpressionsParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionList([NotNull] MetaExpressionsParser.ExpressionListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaExpressionsParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionList([NotNull] MetaExpressionsParser.ExpressionListContext context);
}
