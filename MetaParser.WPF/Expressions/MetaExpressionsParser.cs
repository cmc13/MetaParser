//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Cole\source\repos\MetaParser\MetaParser.WPF\Expressions\MetaExpressions.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class MetaExpressionsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		BOOL=32, MINUS=33, NUMBER=34, HEXNUMBER=35, STRING=36, WHITESPACE=37;
	public const int
		RULE_parse = 0, RULE_expression = 1, RULE_expressionList = 2;
	public static readonly string[] ruleNames = {
		"parse", "expression", "expressionList"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "'$'", "'@'", "'&'", "'{'", "':'", "'}'", "'~'", 
		"'>>'", "'<<'", "'^'", "'|'", "'*'", "'/'", "'%'", "'+'", "'#'", "'='", 
		"'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'&&'", "'||'", "'['", "','", 
		"']'", null, "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "BOOL", "MINUS", "NUMBER", 
		"HEXNUMBER", "STRING", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaExpressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MetaExpressionsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MetaExpressionsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MetaExpressionsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MetaExpressionsParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 6;
			expression(0);
			State = 11;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7;
					Match(T__0);
					State = 8;
					expression(0);
					}
					} 
				}
				State = 13;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 14;
				Match(T__0);
				}
			}

			}
			State = 17;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BitshiftOpsContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitshiftOpsContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterBitshiftOps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitBitshiftOps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitshiftOps(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericAtomExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MetaExpressionsParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MetaExpressionsParser.MINUS, 0); }
		public NumericAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterNumericAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitNumericAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CatchallAtomExpContext : ExpressionContext {
		public CatchallAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterCatchallAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitCatchallAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchallAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseComplementOpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BitwiseComplementOpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterBitwiseComplementOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitBitwiseComplementOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseComplementOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivExpContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MulDivExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterMulDivExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitMulDivExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolAtomExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MetaExpressionsParser.BOOL, 0); }
		public BoolAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterBoolAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitBoolAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetvarAtomExpContext : ExpressionContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GetvarAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterGetvarAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitGetvarAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetvarAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetVarExpContext : ExpressionContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetVarExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterSetVarExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitSetVarExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVarExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetindexAtomExpContext : ExpressionContext {
		public IToken c;
		public ExpressionContext i2;
		public ExpressionContext i1;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GetindexAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterGetindexAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitGetindexAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetindexAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseOpsContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseOpsContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterBitwiseOps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitBitwiseOps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOps(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExpContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MetaExpressionsParser.MINUS, 0); }
		public AddSubExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterAddSubExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitAddSubExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanComparisonExpContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BooleanComparisonExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterBooleanComparisonExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitBooleanComparisonExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanComparisonExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MetaExpressionsParser.STRING, 0); }
		public StringAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterStringAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitStringAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegexExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RegexExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterRegexExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitRegexExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PowerExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterPowerExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitPowerExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparisonExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterComparisonExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitComparisonExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MetaExpressionsParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HexNumberAtomExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXNUMBER() { return GetToken(MetaExpressionsParser.HEXNUMBER, 0); }
		public HexNumberAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterHexNumberAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitHexNumberAtomExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexNumberAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterParenthesisExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitParenthesisExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 20;
				Match(T__1);
				State = 21;
				expression(0);
				State = 22;
				Match(T__2);
				}
				break;
			case 2:
				{
				_localctx = new GetvarAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24;
				((GetvarAtomExpContext)_localctx).id = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 112L) != 0)) ) {
					((GetvarAtomExpContext)_localctx).id = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 25;
				expression(18);
				}
				break;
			case 3:
				{
				_localctx = new NumericAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 26;
					Match(MINUS);
					}
				}

				State = 29;
				Match(NUMBER);
				}
				break;
			case 4:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30;
				Match(STRING);
				State = 31;
				expressionList();
				}
				break;
			case 5:
				{
				_localctx = new BitwiseComplementOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 32;
				Match(T__9);
				State = 33;
				expression(14);
				}
				break;
			case 6:
				{
				_localctx = new SetVarExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 34;
				((SetVarExpContext)_localctx).id = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 112L) != 0)) ) {
					((SetVarExpContext)_localctx).id = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 35;
				expression(0);
				State = 36;
				Match(T__19);
				State = 37;
				expression(7);
				}
				break;
			case 7:
				{
				_localctx = new BoolAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 39;
				Match(BOOL);
				}
				break;
			case 8:
				{
				_localctx = new StringAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 40;
				Match(STRING);
				}
				break;
			case 9:
				{
				_localctx = new HexNumberAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 41;
				Match(HEXNUMBER);
				}
				break;
			case 10:
				{
				_localctx = new CatchallAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 42;
				MatchWildcard();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 87;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 85;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new BitshiftOpsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 45;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 46;
						((BitshiftOpsContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__10 || _la==T__11) ) {
							((BitshiftOpsContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 47;
						expression(14);
						}
						break;
					case 2:
						{
						_localctx = new BitwiseOpsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 48;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 49;
						((BitwiseOpsContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 24640L) != 0)) ) {
							((BitwiseOpsContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 50;
						expression(13);
						}
						break;
					case 3:
						{
						_localctx = new PowerExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 51;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 52;
						Match(T__12);
						State = 53;
						expression(11);
						}
						break;
					case 4:
						{
						_localctx = new MulDivExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 54;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 55;
						((MulDivExpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) ) {
							((MulDivExpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 56;
						expression(11);
						}
						break;
					case 5:
						{
						_localctx = new AddSubExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 57;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 58;
						((AddSubExpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__17 || _la==MINUS) ) {
							((AddSubExpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 59;
						expression(10);
						}
						break;
					case 6:
						{
						_localctx = new RegexExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 60;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 61;
						Match(T__18);
						State = 62;
						expression(9);
						}
						break;
					case 7:
						{
						_localctx = new ComparisonExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 63;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 64;
						((ComparisonExpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 132120576L) != 0)) ) {
							((ComparisonExpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 65;
						expression(7);
						}
						break;
					case 8:
						{
						_localctx = new BooleanComparisonExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 66;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 67;
						((BooleanComparisonExpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__26 || _la==T__27) ) {
							((BooleanComparisonExpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 68;
						expression(6);
						}
						break;
					case 9:
						{
						_localctx = new GetindexAtomExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 69;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						{
						State = 70;
						Match(T__6);
						State = 82;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
						case 1:
							{
							State = 71;
							((GetindexAtomExpContext)_localctx).c = Match(T__7);
							}
							break;
						case 2:
							{
							{
							State = 72;
							((GetindexAtomExpContext)_localctx).c = Match(T__7);
							State = 73;
							((GetindexAtomExpContext)_localctx).i2 = expression(0);
							}
							}
							break;
						case 3:
							{
							State = 74;
							((GetindexAtomExpContext)_localctx).i1 = expression(0);
							}
							break;
						case 4:
							{
							{
							State = 75;
							((GetindexAtomExpContext)_localctx).i1 = expression(0);
							State = 76;
							((GetindexAtomExpContext)_localctx).c = Match(T__7);
							State = 77;
							((GetindexAtomExpContext)_localctx).i2 = expression(0);
							}
							}
							break;
						case 5:
							{
							{
							State = 79;
							((GetindexAtomExpContext)_localctx).i1 = expression(0);
							State = 80;
							((GetindexAtomExpContext)_localctx).c = Match(T__7);
							}
							}
							break;
						}
						State = 84;
						Match(T__8);
						}
						}
						break;
					}
					} 
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMetaExpressionsListener typedListener = listener as IMetaExpressionsListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaExpressionsVisitor<TResult> typedVisitor = visitor as IMetaExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 4, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(T__28);
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 91;
				expression(0);
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__29) {
					{
					{
					State = 92;
					Match(T__29);
					State = 93;
					expression(0);
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 101;
			Match(T__30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 17);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,37,104,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,5,0,10,8,0,10,0,12,0,13,
		9,0,1,0,3,0,16,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,28,8,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,44,8,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,3,1,83,8,1,1,1,5,1,86,8,1,10,1,12,1,89,9,1,1,2,1,2,1,2,1,2,5,2,95,
		8,2,10,2,12,2,98,9,2,3,2,100,8,2,1,2,1,2,1,2,0,1,2,3,0,2,4,0,7,1,0,4,6,
		1,0,11,12,2,0,6,6,13,14,1,0,15,17,2,0,18,18,33,33,1,0,21,26,1,0,27,28,
		127,0,6,1,0,0,0,2,43,1,0,0,0,4,90,1,0,0,0,6,11,3,2,1,0,7,8,5,1,0,0,8,10,
		3,2,1,0,9,7,1,0,0,0,10,13,1,0,0,0,11,9,1,0,0,0,11,12,1,0,0,0,12,15,1,0,
		0,0,13,11,1,0,0,0,14,16,5,1,0,0,15,14,1,0,0,0,15,16,1,0,0,0,16,17,1,0,
		0,0,17,18,5,0,0,1,18,1,1,0,0,0,19,20,6,1,-1,0,20,21,5,2,0,0,21,22,3,2,
		1,0,22,23,5,3,0,0,23,44,1,0,0,0,24,25,7,0,0,0,25,44,3,2,1,18,26,28,5,33,
		0,0,27,26,1,0,0,0,27,28,1,0,0,0,28,29,1,0,0,0,29,44,5,34,0,0,30,31,5,36,
		0,0,31,44,3,4,2,0,32,33,5,10,0,0,33,44,3,2,1,14,34,35,7,0,0,0,35,36,3,
		2,1,0,36,37,5,20,0,0,37,38,3,2,1,7,38,44,1,0,0,0,39,44,5,32,0,0,40,44,
		5,36,0,0,41,44,5,35,0,0,42,44,9,0,0,0,43,19,1,0,0,0,43,24,1,0,0,0,43,27,
		1,0,0,0,43,30,1,0,0,0,43,32,1,0,0,0,43,34,1,0,0,0,43,39,1,0,0,0,43,40,
		1,0,0,0,43,41,1,0,0,0,43,42,1,0,0,0,44,87,1,0,0,0,45,46,10,13,0,0,46,47,
		7,1,0,0,47,86,3,2,1,14,48,49,10,12,0,0,49,50,7,2,0,0,50,86,3,2,1,13,51,
		52,10,11,0,0,52,53,5,13,0,0,53,86,3,2,1,11,54,55,10,10,0,0,55,56,7,3,0,
		0,56,86,3,2,1,11,57,58,10,9,0,0,58,59,7,4,0,0,59,86,3,2,1,10,60,61,10,
		8,0,0,61,62,5,19,0,0,62,86,3,2,1,9,63,64,10,6,0,0,64,65,7,5,0,0,65,86,
		3,2,1,7,66,67,10,5,0,0,67,68,7,6,0,0,68,86,3,2,1,6,69,70,10,17,0,0,70,
		82,5,7,0,0,71,83,5,8,0,0,72,73,5,8,0,0,73,83,3,2,1,0,74,83,3,2,1,0,75,
		76,3,2,1,0,76,77,5,8,0,0,77,78,3,2,1,0,78,83,1,0,0,0,79,80,3,2,1,0,80,
		81,5,8,0,0,81,83,1,0,0,0,82,71,1,0,0,0,82,72,1,0,0,0,82,74,1,0,0,0,82,
		75,1,0,0,0,82,79,1,0,0,0,83,84,1,0,0,0,84,86,5,9,0,0,85,45,1,0,0,0,85,
		48,1,0,0,0,85,51,1,0,0,0,85,54,1,0,0,0,85,57,1,0,0,0,85,60,1,0,0,0,85,
		63,1,0,0,0,85,66,1,0,0,0,85,69,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,
		88,1,0,0,0,88,3,1,0,0,0,89,87,1,0,0,0,90,99,5,29,0,0,91,96,3,2,1,0,92,
		93,5,30,0,0,93,95,3,2,1,0,94,92,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,
		97,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,99,91,1,0,0,0,99,100,1,0,0,0,100,
		101,1,0,0,0,101,102,5,31,0,0,102,5,1,0,0,0,9,11,15,27,43,82,85,87,96,99
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
