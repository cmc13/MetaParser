<UserControl x:Class="MetaParser.WPF.Views.MetaView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MetaParser.WPF.Views"
             xmlns:cvt="clr-namespace:MetaParser.WPF.Converters"
             xmlns:dd="urn:gong-wpf-dragdrop"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:root="clr-namespace:MetaParser.WPF"
             xmlns:vm="clr-namespace:MetaParser.WPF.ViewModels"
             xmlns:vr="clr-namespace:MetaParser.WPF.Views.RuleList"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <cvt:NullToBoolConverter x:Key="NullToBoolConverter" />
        <cvt:ComparisonToVisibilityConverter x:Key="ComparisonToVisibilityConverter" />
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <cvt:ReverseBooleanToVisibilityConverter x:Key="ReverseBooleanToVisibilityConverter" />
        <CollectionViewSource x:Key="ruleList" Source="{Binding Rules}" IsLiveGroupingRequested="True">
            <CollectionViewSource.GroupDescriptions>
                <PropertyGroupDescription PropertyName="State" />
            </CollectionViewSource.GroupDescriptions>
        </CollectionViewSource>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="5" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <ListBox Grid.Row="0" ItemsSource="{Binding Source={StaticResource ruleList}}" SelectedItem="{Binding SelectedRule}" HorizontalContentAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" dd:DragDrop.DropHandler="{Binding}" dd:DragDrop.IsDragSource="True" dd:DragDrop.IsDropTarget="True" BorderThickness="0" Background="Transparent">
            <ListBox.Resources>
                <root:DataContextSpy x:Key="Spy" />
            </ListBox.Resources>
            <b:Interaction.Behaviors>
                <root:OverlayGroupingBehavior />
                <root:ScrollIntoViewBehavior />
            </b:Interaction.Behaviors>
            <ListBox.InputBindings>
                <KeyBinding Command="{Binding RemoveCommand}" Key="Delete" />
                <KeyBinding Command="{Binding CutCommand}" Key="X" Modifiers="Ctrl" />
                <KeyBinding Command="{Binding CopyCommand}" Key="C" Modifiers="Ctrl" />
                <KeyBinding Command="{Binding PasteCommand}" Key="V" Modifiers="Ctrl" />
            </ListBox.InputBindings>
            <ListBox.GroupStyle>
                <GroupStyle>
                    <GroupStyle.Panel>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel Orientation="Vertical" />
                        </ItemsPanelTemplate>
                    </GroupStyle.Panel>
                    <GroupStyle.HeaderTemplate>
                        <DataTemplate>
                            <Border Opacity="1" HorizontalAlignment="Stretch">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="Black" />
                                        <GradientStop Offset="0.5" Color="Black" />
                                        <GradientStop Offset="1" Color="DarkRed" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <TextBlock FontWeight="Bold" FontSize="16" Text="{Binding Name}" VerticalAlignment="Center" HorizontalAlignment="Left" TextAlignment="Center" Foreground="White" Margin="2,0,0,0" />
                            </Border>
                        </DataTemplate>
                    </GroupStyle.HeaderTemplate>
                    <GroupStyle.ContainerStyle>
                        <Style TargetType="GroupItem">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="GroupItem">
                                        <StackPanel>
                                            <ContentPresenter Panel.ZIndex="100" />
                                            <ItemsPresenter />
                                        </StackPanel>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </GroupStyle.ContainerStyle>
                </GroupStyle>
            </ListBox.GroupStyle>
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <Border Margin="5,2,2,2" CornerRadius="5" Padding="2">
                                    <Border.ContextMenu>
                                        <ContextMenu>
                                            <MenuItem Header="Move To State" ItemsSource="{Binding Path=DataContext.StateList, Source={StaticResource Spy}}">
                                                <MenuItem.ItemContainerStyle>
                                                    <Style TargetType="MenuItem">
                                                        <Setter Property="HeaderTemplate">
                                                            <Setter.Value>
                                                                <DataTemplate>
                                                                    <TextBlock Text="{Binding}" />
                                                                </DataTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="Command" Value="{Binding Path=DataContext.MoveToStateCommand, Source={StaticResource Spy}}" />
                                                        <Setter Property="CommandParameter" Value="{Binding}" />
                                                        <Setter Property="root:CommandParameterBehavior.IsCommandRequeriedOnChange" Value="True" />
                                                    </Style>
                                                </MenuItem.ItemContainerStyle>
                                            </MenuItem>
                                            <MenuItem Header="Condition">
                                                <MenuItem Header="Invert" Command="{Binding InvertConditionCommand}">
                                                    <MenuItem.Icon>
                                                        <Image Source="../Assets/Icons/Invert_16x.png" Style="{StaticResource DisabledImageStyle}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <MenuItem Header="Wrap in 'All' Block" Command="{Binding WrapConditionInAllCommand}">
                                                    <MenuItem.Icon>
                                                        <Image Source="../Assets/Icons/All.png" Style="{StaticResource DisabledImageStyle}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <MenuItem Header="Wrap in 'Any' Block" Command="{Binding WrapConditionInAnyCommand}">
                                                    <MenuItem.Icon>
                                                        <Image Source="../Assets/Icons/Any.png" Style="{StaticResource DisabledImageStyle}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <MenuItem Header="Unwrap" Command="{Binding UnwrapConditionCommand}">
                                                    <MenuItem.Icon>
                                                        <Image Source="../Assets/Icons/Release_16x.png" Style="{StaticResource DisabledImageStyle}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                            </MenuItem>
                                            <MenuItem Header="Action">
                                                <MenuItem Header="Wrap in 'Do All' Block" Command="{Binding WrapActionInAllCommand}">
                                                    <MenuItem.Icon>
                                                        <Image Source="../Assets/Icons/All.png" Style="{StaticResource DisabledImageStyle}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <MenuItem Header="Unwrap" Command="{Binding UnwrapActionCommand}">
                                                    <MenuItem.Icon>
                                                        <Image Source="../Assets/Icons/Release_16x.png" Style="{StaticResource DisabledImageStyle}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                            </MenuItem>
                                        </ContextMenu>
                                    </Border.ContextMenu>
                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Setter Property="BorderThickness" Value="1" />
                                            <Setter Property="BorderBrush">
                                                <Setter.Value>
                                                    <SolidColorBrush Color="DarkGray" Opacity="0.7" />
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1" Opacity="0.5">
                                                        <GradientStop Offset="0" Color="Transparent" />
                                                        <GradientStop Offset="1" Color="DarkGray" />
                                                    </LinearGradientBrush>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}" Value="True">
                                                    <Setter Property="BorderThickness" Value="2" />
                                                    <Setter Property="BorderBrush" Value="{StaticResource ListBoxSelectedItemBorderBrush}" />
                                                    <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                    <Setter Property="TextBlock.FontSize" Value="14" />
                                                    <Setter Property="Background" Value="{StaticResource ListBoxSelectedItemBackgroundBrush}" />
                                                </DataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True" />
                                                        <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True" />
                                                    </MultiDataTrigger.Conditions>
                                                    <MultiDataTrigger.Setters>
                                                        <Setter Property="BorderBrush" Value="{StaticResource ListBoxSelectedActiveItemBorderBrush}" />
                                                        <Setter Property="Background" Value="{StaticResource ListBoxSelectedActiveItemBackgroundBrush}" />
                                                    </MultiDataTrigger.Setters>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition  Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True" />
                                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="False" />
                                                    </MultiDataTrigger.Conditions>
                                                    <MultiDataTrigger.Setters>
                                                        <Setter Property="Background" Value="{StaticResource ListBoxMouseOverItemBackgroundBrush}" />
                                                    </MultiDataTrigger.Setters>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>
                                    <ContentPresenter Margin="5,2,2,2" />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.ItemTemplate>
                <DataTemplate DataType="{x:Type vm:RuleViewModel}">
                    <vr:RuleListView Foreground="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=Foreground}" />
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <GridSplitter Grid.Row="1" HorizontalAlignment="Stretch">
            <GridSplitter.Template>
                <ControlTemplate TargetType="GridSplitter">
                    <Grid>
                        <Grid.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientStop Color="DarkGray" Offset="0" />
                                <GradientStop Color="White" Offset="1" />
                            </LinearGradientBrush>
                        </Grid.Background>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Canvas Grid.Column="1" Width="18" Height="5" Background="Transparent">
                            <Ellipse Width="3" Height="3" Canvas.Top="1" Canvas.Left="0" Fill="Black" />
                            <Ellipse Width="3" Height="3" Canvas.Top="1" Canvas.Left="5" Fill="Black" />
                            <Ellipse Width="3" Height="3" Canvas.Top="1" Canvas.Left="10" Fill="Black" />
                            <Ellipse Width="3" Height="3" Canvas.Top="1" Canvas.Left="15" Fill="Black" />
                        </Canvas>
                    </Grid>
                </ControlTemplate>
            </GridSplitter.Template>
        </GridSplitter>

        <Grid Grid.Row="2" IsEnabled="{Binding SelectedRule, Converter={StaticResource NullToBoolConverter}}">
            <local:RuleView DataContext="{Binding SelectedRule}" Background="Transparent" Foreground="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=Foreground}" />
        </Grid>

        <Grid Grid.Row="0" Grid.RowSpan="3" Background="{x:Null}">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Opacity" Value="0" />
                    <Style.Triggers>
                        <Trigger Property="Opacity" Value="0">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <DataTrigger Binding="{Binding ElementName=btnToggleValidationResults, Path=IsChecked}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" From="0" To="1">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseInOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" From="1" To="0">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseInOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Grid.RowDefinitions>
                <RowDefinition Height="3*" />
                <RowDefinition Height="3" />
                <RowDefinition Height="*" MinHeight="100" />
            </Grid.RowDefinitions>
            <GridSplitter Grid.Row="1" HorizontalAlignment="Stretch" Background="Transparent" Panel.ZIndex="100">
                <GridSplitter.RenderTransform>
                    <TranslateTransform Y="3" />
                </GridSplitter.RenderTransform>
            </GridSplitter>
            <Border Grid.Row="2" BorderBrush="DarkRed" BorderThickness="1" CornerRadius="3" Margin="2">
                <Border.Background>
                    <SolidColorBrush Color="White" Opacity="0.8" />
                </Border.Background>
                <Grid Background="Transparent">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0" Background="DarkRed">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Column="0" FontWeight="Bold" Margin="2" FontSize="14" Foreground="White">Validation Errors</TextBlock>
                        <Button Grid.Column="1" Command="{Binding CloseValidationErrorsCommand}">
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Setter Property="BorderThickness" Value="0" />
                                    <Setter Property="Background" Value="Transparent" />
                                </Style>
                            </Button.Style>
                            <Button.Content>
                                <Image Source="../Assets/Icons/Close_16x.png" />
                            </Button.Content>
                        </Button>
                    </Grid>
                    <ListBox Grid.Row="1" ItemsSource="{Binding ValidationResults}" SelectedItem="{Binding SelectedValidationResult}" Background="Transparent">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Message}" />
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </Grid>
            </Border>
        </Grid>

        <StatusBar Grid.Row="3" DockPanel.Dock="Bottom">
            <StatusBarItem>
                <Grid>
                    <Grid.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Validate Meta" Command="{Binding ValidateCommand}">
                                <MenuItem.Icon>
                                    <Image Source="../Assets/Icons/ValidateDocument_16x.png" />
                                </MenuItem.Icon>
                            </MenuItem>
                        </ContextMenu>
                    </Grid.ContextMenu>
                    <Image Source="../Assets/Icons/checkmark.ico" Height="16" Visibility="{Binding ValidationResults.Count, Converter={StaticResource ComparisonToVisibilityConverter}, ConverterParameter='=0'}" ToolTip="No Validation Errors Detected" />
                    <ToggleButton Visibility="{Binding ValidationResults.Count, Converter={StaticResource ComparisonToVisibilityConverter}, ConverterParameter='>0'}" IsChecked="{Binding ShowValidationErrors}" Name="btnToggleValidationResults" Cursor="Hand">
                        <ToggleButton.ToolTip>
                            <TextBlock Text="{Binding ValidationResults.Count, StringFormat={}{0} Validation Errors}" />
                        </ToggleButton.ToolTip>
                        <ToggleButton.Style>
                            <Style TargetType="ToggleButton">
                                <Setter Property="BorderThickness" Value="0" />
                            </Style>
                        </ToggleButton.Style>
                        <StackPanel Orientation="Horizontal">
                            <Image Source="../Assets/Icons/error.ico" Height="16" />
                            <TextBlock Text="{Binding ValidationResults.Count}" />
                        </StackPanel>
                    </ToggleButton>
                </Grid>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</UserControl>
